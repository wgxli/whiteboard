{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["canvas","ctx","lastButton","onResize","currentPath","paperType","dashPattern","handleMouseMove","e","clientX","clientY","buttons","x","y","button","push","beginPath","moveTo","i","length","xa","ya","xb","yb","quadraticCurveTo","stroke","slice","fillStyle","arc","Math","PI","fill","clearCanvas","clearRect","width","height","strokeStyle","lineWidth","getLineDash","lastStyle","lastWidth","lastDash","w","window","innerWidth","h","innerHeight","round","nw","nh","dw","dh","getX","getY","lineTo","includes","setLineDash","midX","floor","midY","ceil","handleKeyPress","key","max","dashPatterns","App","useState","setWidth","setHeight","useEffect","document","getElementById","getContext","lineCap","lineJoin","addEventListener","id","onContextMenu","preventDefault","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a1079c26.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\n\nlet [canvas, ctx] = [null, null];\nlet lastButton = 0;\nconst DPI = 2;\n\nfunction initializeCanvas() {\n    canvas = document.getElementById('canvas');\n    ctx = canvas.getContext('2d');\n\n    ctx.lineCap = 'round';\n    ctx.lineJoin = 'round';\n    ctx.lineWidth = 4;\n    ctx.strokeStyle = 'black';\n}\n\nlet onResize = () => null;\nlet currentPath = [];\n\nlet paperType = 0;\nlet dashPattern = 0;\n\nfunction handleMouseMove(e) {\n    const [x, y, button] = [DPI * e.clientX, DPI * e.clientY, e.buttons];\n\n\n    if (lastButton === button) {\n        switch (button) {\n            case 1:\n                currentPath.push([x, y]);\n\n                // Draw path\n                ctx.beginPath();\n                ctx.moveTo(\n                    (currentPath[0][0] + currentPath[1][0])/2,\n                    (currentPath[0][1] + currentPath[1][1])/2\n                );\n                for (let i = 2; i < currentPath.length; i++) {\n                    const [xa, ya] = currentPath[i - 1];\n                    const [xb, yb] = currentPath[i];\n                    ctx.quadraticCurveTo(\n                        xa, ya,\n                        (xa+xb)/2, (ya+yb)/2\n                    );\n                }\n                ctx.stroke();\n\n                if (currentPath.length > 600) {\n                    currentPath = currentPath.slice(currentPath.length - 2);\n                }\n                break;\n\n            case 2:\n                // Eraser\n                ctx.fillStyle = 'white';\n                ctx.beginPath();\n                ctx.arc(x, y, 50, 0, 2 * Math.PI);\n                ctx.fill();\n                break;\n\n            default:\n                break;\n        }\n    } else {\n        currentPath = [[x, y]];\n    }\n\n    lastButton = button;\n}\n\nfunction clearCanvas() {\n    onResize();\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    const [\n        lastStyle, lastWidth, lastDash\n    ] = [\n        ctx.strokeStyle, ctx.lineWidth, ctx.getLineDash()\n    ];\n    const [w, h] = [DPI * window.innerWidth, DPI * window.innerHeight];\n\n    paperType %= 4;\n\n    const margin = 250;\n    const spacing = 120;\n\n    let [nw, nh] = [\n        Math.round((w - 2 * margin) / spacing),\n        Math.round((h - 2 * margin) / spacing)\n    ];\n    nw -= (nw % 2);\n    nh -= (nh % 2);\n\n    const [dw, dh] = [(w - 2 * margin) / nw, (h - 2 * margin) / nh];\n\n    const getX = (i) => ((w - dw * nw) / 2 + i * dw);\n    const getY = (i) => ((h - dh * nh) / 2 + i * dh);\n\n    if (paperType === 1) {\n        ctx.lineWidth = 2;\n        ctx.strokeStyle = '#888';\n\n        for (let i = 0; i <= nh; i++) {\n            ctx.beginPath();\n            ctx.moveTo(250, getY(i));\n            ctx.lineTo(w - 250, getY(i));\n            ctx.stroke();\n        }\n    }\n\n    if ([2, 3].includes(paperType)) {\n        ctx.lineWidth = 2;\n        ctx.strokeStyle = '#888';\n        ctx.setLineDash([10, 10]);\n\n        for (let i = 0; i <= nh; i++) {\n            ctx.beginPath();\n            ctx.moveTo(getX(0), getY(i));\n            ctx.lineTo(getX(nw), getY(i));\n            ctx.stroke();\n        }\n\n        for (let i = 0; i <= nw; i++) {\n            ctx.beginPath();\n            ctx.moveTo(getX(i), getY(0));\n            ctx.lineTo(getX(i), getY(nh));\n            ctx.stroke();\n        }\n\n        ctx.setLineDash([]);\n    }\n\n    if (paperType === 3) {\n        ctx.lineWidth = 5;\n        ctx.strokeStyle = 'black';\n        ctx.fillStyle = 'black';\n\n        const midX = getX(Math.floor(nw/2));\n        const midY = getY(Math.ceil(nh/2));\n\n        ctx.beginPath();\n        ctx.moveTo(getX(-0.5), midY);\n        ctx.lineTo(getX(nw + 0.5), midY);\n        ctx.stroke();\n\n        ctx.beginPath();\n        ctx.moveTo(midX, getY(nh + 0.5));\n        ctx.lineTo(midX, getY(-0.5));\n        ctx.stroke();\n\n        // Arrows\n        ctx.beginPath();\n        ctx.moveTo(getX(nw + 0.5), midY - 20);\n        ctx.lineTo(getX(nw + 0.5) + 40, midY);\n        ctx.lineTo(getX(nw + 0.5), midY + 20);\n        ctx.fill();\n\n        ctx.beginPath();\n        ctx.moveTo(midX + 20, getY(-0.5));\n        ctx.lineTo(midX, getY(-0.5)- 40);\n        ctx.lineTo(midX - 20, getY(-0.5));\n        ctx.fill();\n    }\n\n    ctx.strokeStyle = lastStyle;\n    ctx.lineWidth = lastWidth;\n    ctx.setLineDash(lastDash);\n}\n\nfunction handleKeyPress(e) {\n    switch (e.key) {\n        case '-':\n            ctx.lineWidth = Math.max(ctx.lineWidth - 1, 1);\n            break;\n\n        case '+':\n            ctx.lineWidth += 1;\n            break;\n\n        case 'c':\n            paperType += 1;\n            clearCanvas();\n            break;\n\n        case 'e':\n            clearCanvas();\n            break;\n\n\n        case 'g':\n            ctx.strokeStyle = 'black';\n            break;\n\n        case 'h':\n            ctx.strokeStyle = 'red';\n            break;\n\n        case 'i':\n            ctx.strokeStyle = 'blue';\n            break;\n\n        case 'j':\n            ctx.strokeStyle = 'green';\n            break;\n\n        case 'k':\n            const dashPatterns = [\n                [],\n                [20, 20],\n                [3, 17],\n            ];\n            dashPattern += 1;\n            dashPattern %= dashPatterns.length;\n            ctx.setLineDash(dashPatterns[dashPattern]);\n            break;\n\n        case 'l':\n            ctx.strokeStyle = 'black';\n            ctx.lineWidth = 4;\n            dashPattern = 0;\n            ctx.setLineDash([]);\n            break;\n\n        default:\n            break;\n    }\n}\n\nfunction App() {\n    const [width, setWidth] = useState(DPI * window.innerWidth);\n    const [height, setHeight] = useState(DPI * window.innerHeight);\n\n    useEffect(() => {\n        initializeCanvas();\n        window.addEventListener('mousemove', handleMouseMove);\n        window.addEventListener('keydown', handleKeyPress);\n        onResize = () => {\n            setWidth(DPI * window.innerWidth);\n            setHeight(DPI * window.innerHeight);\n        }\n    });\n\n    return <canvas\n        id='canvas'\n        width={width}\n        height={height}\n        onContextMenu={(e) => {\n            e.preventDefault();\n            return false;\n        }}\n    />\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}